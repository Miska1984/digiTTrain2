# users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model, login
from .forms import UserRegistrationForm, ProfileForm, UserUpdateForm
from .models import Profile

User = get_user_model()

def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user) # Automatikus bejelentkez√©s regisztr√°ci√≥ ut√°n
            username = form.cleaned_data.get('username')
            messages.success(request, f'Sikeres regisztr√°ci√≥, {username}! Most m√°r bejelentkezve vagy.')
            return redirect('core:main_page')
    else:
        form = UserRegistrationForm()
    return render(request, 'users/register.html', {'form': form})


@login_required
def edit_profile(request):
    """
    Ez a n√©zet kezeli a felhaszn√°l√≥ profilj√°nak szerkeszt√©s√©t,
    bele√©rtve a felhaszn√°l√≥i adatok √©s a profilk√©p friss√≠t√©s√©t.
    """
    # Profil lek√©rdez√©se vagy l√©trehoz√°sa a felhaszn√°l√≥hoz
    profile, created = Profile.objects.get_or_create(user=request.user)
    if created:
        # Ha √∫j profil j√∂n l√©tre, biztos√≠tjuk, hogy a user hozz√° legyen rendelve
        profile.user = request.user
        profile.save()

    # Ha POST k√©r√©s √©rkezik (≈±rlap bek√ºld√©se)
    if request.method == "POST":
        # Felhaszn√°l√≥i ≈±rlap inicializ√°l√°sa a POST adatokkal √©s a felhaszn√°l√≥ p√©ld√°nnyal
        user_form = UserUpdateForm(request.POST, instance=request.user)
        # Profil ≈±rlap inicializ√°l√°sa a POST adatokkal, a felt√∂lt√∂tt f√°jlokkal √©s a profillal
        profile_form = ProfileForm(request.POST, request.FILES, instance=profile)

        # Ha mindk√©t ≈±rlap √©rv√©nyes
        if user_form.is_valid() and profile_form.is_valid():
            # Profil p√©ld√°ny ment√©se commit=False-al, hogy beleny√∫lhassunk m√©g ment√©s el≈ëtt
            instance = profile_form.save(commit=False)

            # Debug: Ellen≈ërizz√ºk, hogy √©rkezett-e f√°jl a request.FILES-ben
            uploaded_file = request.FILES.get("profile_picture")
            if uploaded_file:
                print(f"üì∏ Felt√∂lt√∂tt f√°jl a POST-ban: {uploaded_file.name}")
            else:
                # Ha nem √©rkezett f√°jl, de a ≈±rlap valid, az azt jelenti, hogy nincs √∫j k√©p felt√∂ltve
                # Ebben az esetben a kor√°bbi k√©pet nem szabad t√∂r√∂lni, csak ha explicitly t√∂r√∂lt√©k
                # Az `instance.profile_picture` ebben az esetben a r√©gi √©rt√©ket fogja tartalmazni
                print("‚ÑπÔ∏è Nincs √∫j f√°jl a request.FILES-ben (vagy nem t√∂rt√©nt k√©pv√°lt√°s).")
                # Ha a profile_picture mez≈ë √ºres lett (t√∂r√∂lve lett), akkor azt is kezelni kell
                if not profile.profile_picture and not uploaded_file:
                     print("‚ÑπÔ∏è A k√©pmez≈ë √ºres volt, √©s nem t√∂lt√∂ttek fel √∫jat.")
                elif profile.profile_picture and not uploaded_file:
                     print(f"‚ÑπÔ∏è Megl√©v≈ë k√©p van: {profile.profile_picture.name}, de √∫j nincs felt√∂ltve.")

            # Biztos√≠tjuk, hogy a mentett profil a megfelel≈ë felhaszn√°l√≥hoz tartozzon
            instance.user = request.user

            # A profile_picture mez≈ë √°llapot√°nak ellen≈ërz√©se √©s loggol√°sa
            # A Django √©s a storages backend gondoskodik arr√≥l, hogy a f√°jl GCS-be ker√ºlj√∂n
            if instance.profile_picture:
                print(f"‚úÖ Mentett f√°jl neve: {instance.profile_picture.name}")
                try:
                    # Megpr√≥b√°ljuk lek√©rni a f√°jl URL-j√©t. Ez m√°r a GCS-b≈ël fog j√∂nni.
                    file_url = instance.profile_picture.url
                    print(f"üåç Mentett f√°jl URL: {file_url}")
                except Exception as e:
                    # Ha nem tudjuk lek√©rni az URL-t, valami baj van a GCS el√©r√©ssel vagy a konfigur√°ci√≥val
                    print(f"‚ö†Ô∏è Nem tudtam lek√©rni az URL-t a mentett f√°jlhoz: {e}")
                    # Itt jelezhetn√©nk egy specifikusabb hib√°t a felhaszn√°l√≥nak
                    messages.error(request, f"‚ö†Ô∏è Hiba t√∂rt√©nt a k√©p ment√©sekor: {e}")
                    return redirect("users:edit_profile") # Visszat√©r√ºnk az ≈±rlaphoz hiba eset√©n
            else:
                # Ha a profile_picture mez≈ë √ºres maradt (ak√°r t√∂rl√©s, ak√°r nem felt√∂lt√©s miatt)
                print("‚ö†Ô∏è A profilp√©ld√°nyban nincs k√©p mez≈ë be√°ll√≠tva!")
                # Ha t√∂rl√©s t√∂rt√©nt, √©s a kor√°bbi k√©p mez≈ë nem lett t√∂r√∂lve a modellben
                # Biztos√≠tani kell, hogy a k√©p elt√°vol√≠t√°sra ker√ºlj√∂n a GCS-b≈ël is, ha ez a c√©l
                # (Ez √°ltal√°ban a Django-storages backend feladata, ha j√≥l van konfigur√°lva)

            # V√©gleges ment√©s az adatb√°zisba. Itt t√∂rt√©nik a f√°jl t√©nyleges ment√©se (GCS-be)
            instance.save()

            # Felhaszn√°l√≥i adatok ment√©se
            user_form.save()

            # Sikeres √ºzenet megjelen√≠t√©se
            messages.success(request, "‚úÖ A profil sikeresen friss√≠tve!")
            # √Åtir√°ny√≠t√°s az edit_profile oldalra az aktu√°lis √°llapot megjelen√≠t√©s√©hez
            return redirect("users:edit_profile")
        else:
            # Ha az ≈±rlapok nem √©rv√©nyesek, megjelen√≠tj√ºk a hib√°kat
            print("‚ùå Form hiba:", user_form.errors, profile_form.errors)
            messages.error(request, "‚ö†Ô∏è Hiba t√∂rt√©nt! Ellen≈ërizd az ≈±rlap adatait.")
            # Maradunk az ≈±rlapon, hogy a felhaszn√°l√≥ jav√≠thassa a hib√°kat

    # Ha GET k√©r√©s √©rkezik, vagy az ≈±rlap nem volt √©rv√©nyes,
    # inicializ√°ljuk az ≈±rlapokat a jelenlegi adatokkal
    else:
        user_form = UserUpdateForm(instance=request.user)
        profile_form = ProfileForm(instance=request.user.profile) # A kor√°bbi k√©p is bet√∂lt≈ëdik ide

    # Az ≈±rlapok √©s a felhaszn√°l√≥ kontextusban √°tad√°sa a template-nek
    return render(request, "users/edit_profile.html", {
        "user_form": user_form,
        "profile_form": profile_form,
    })
