# users/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.core.files.storage import default_storage
from django.utils import timezone
import logging
import os
import uuid


logger = logging.getLogger(__name__)
logger.info("üì¶ Akt√≠v storage backend: %s", default_storage.__class__)

class User(AbstractUser):
    """
    Az egyedi User modell, amihez a szerepk√∂r√∂k kapcsol√≥dnak.
    """
    groups = models.ManyToManyField(
        'auth.Group',
        verbose_name='groups',
        blank=True,
        help_text='A felhaszn√°l√≥ csoportjai. A felhaszn√°l√≥ megkap minden jogosults√°got, ami az √∂sszes csoportj√°hoz tartozik.',
        related_name="user_groups",  # Egyedi n√©v hozz√°adva
        related_query_name="user",
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        verbose_name='user permissions',
        blank=True,
        help_text='Egyedi jogosults√°gok a felhaszn√°l√≥ sz√°m√°ra.',
        related_name="user_permissions_set",  # Egyedi n√©v hozz√°adva
        related_query_name="user",
    )

    def __str__(self):
        return self.username
    
    @property
    def is_adult(self):
        """Ellen≈ërzi, hogy 18 √©ves vagy ann√°l id≈ësebb-e"""
        if hasattr(self, 'profile') and self.profile.date_of_birth:
            from datetime import date
            today = date.today()
            age = today.year - self.profile.date_of_birth.year - (
                (today.month, today.day) < (self.profile.date_of_birth.month, self.profile.date_of_birth.day)
            )
            return age >= 18
        return True  # Ha nincs sz√ºlet√©si d√°tum, alap√©rtelmezetten feln≈ëtt
    
    def is_club_leader_in(self, club):
        """
        Ellen≈ërzi, hogy a felhaszn√°l√≥ egyes√ºleti vezet≈ë-e az adott klubban
        """
        return self.user_roles.filter(
            club=club,
            role__name="Egyes√ºleti vezet≈ë",
            status="approved"
        ).exists()

def profile_picture_upload_path(instance, filename):
    # Gener√°lunk egy egyedi UUID-t a f√°jln√©vhez, √≠gy biztosan nem lesz √ºtk√∂z√©s
    unique_filename = f"{uuid.uuid4().hex}_{filename}"
    path = os.path.join("profile_pics", unique_filename)
    logger.info(f"üìÇ F√°jlfelt√∂lt√©si √∫tvonal gener√°lva: {path}")
    print(f"üìÇ F√°jlfelt√∂lt√©si √∫tvonal gener√°lva: {path}")
    return path

class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    first_name = models.CharField(max_length=50, blank=True)
    last_name = models.CharField(max_length=50, blank=True)
    date_of_birth = models.DateField(null=True, blank=True)

    GENDER_CHOICES = (
        ('M', 'F√©rfi'),
        ('F', 'N≈ë'),
    )
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, blank=True)

    # EXPLICIT storage backend megad√°sa!
    profile_picture = models.ImageField(
        upload_to=profile_picture_upload_path, 
        blank=True, 
        null=True,
    )

    def save(self, *args, **kwargs):
        """Override save method a r√©szletes logginghoz"""
        if self.profile_picture:
            logger.info(f"üíæ Profile ment√©se - f√°jl: {self.profile_picture.name}")
            logger.info(f"üîç Storage backend: {self.profile_picture.storage.__class__}")
            print(f"üíæ Profile ment√©se - f√°jl: {self.profile_picture.name}")
            print(f"üîç Storage backend: {self.profile_picture.storage.__class__}")
        
        super().save(*args, **kwargs)
        
        if self.profile_picture:
            logger.info(f"‚úÖ Profile mentve - f√°jl URL: {self.profile_picture.url}")
            print(f"‚úÖ Profile mentve - f√°jl URL: {self.profile_picture.url}")

    def __str__(self):
        return f"{self.user.username} Profile"

    @property
    def profile_picture_url(self):
        if self.profile_picture:
            try:
                url = self.profile_picture.url
                logger.info(f"üîó K√©p URL lek√©rve: {url}")
                print(f"üîó K√©p URL lek√©rve: {url}")
                return url
            except Exception as e:
                logger.error(f"‚ùå Hiba a k√©p URL lek√©r√©sekor: {str(e)}")
                print(f"‚ùå Hiba a k√©p URL lek√©r√©sekor: {str(e)}")
                return settings.STATIC_URL + "images/default.jpg"
        logger.info("‚ö†Ô∏è Nincs k√©p, default-ot adunk vissza")
        print("‚ö†Ô∏è Nincs k√©p, default-ot adunk vissza")
        return settings.STATIC_URL + "images/default.jpg"  # legyen egy default k√©p a staticban    
    
class Role(models.Model):
    # A szerepk√∂r√∂k list√°j√°t a k√≥dban t√°roljuk
    ROLE_CHOICES = (
        ('Egyes√ºleti vezet≈ë', 'Egyes√ºleti vezet≈ë'),
        ('Edz≈ë', 'Edz≈ë'),
        ('Sportol√≥', 'Sportol√≥'),
        ('Sz√ºl≈ë', 'Sz√ºl≈ë'),
        # K√©s≈ëbbre tartogatva:
        # ('Szurkol√≥', 'Szurkol√≥'),
        # ('Egyes√ºleti adminisztr√°tor', 'Egyes√ºleti adminisztr√°tor'),
    )
    name = models.CharField(max_length=50, choices=ROLE_CHOICES, unique=True)
    description = models.TextField(blank=True)

    def __str__(self):
        return self.name

class Sport(models.Model):
    # A sport√°gak list√°j√°t szint√©n a k√≥dban t√°roljuk
    SPORT_CHOICES = (
        ('Kos√°rlabda', 'Kos√°rlabda'),
        ('Birk√≥z√°s', 'Birk√≥z√°s'),
        ('Labdar√∫g√°s', 'Labdar√∫g√°s'),
        ('K√©zilabda', 'K√©zilabda'),
        ('V√≠zilabda', 'V√≠zilabda'),
        ('R√∂plabda', 'R√∂plabda'),
        ('Asztalitenisz', 'Asztalitenisz'),
        ('√ösz√°s', '√ösz√°s'),
    )
    name = models.CharField(max_length=50, choices=SPORT_CHOICES, unique=True)

    def __str__(self):
        return self.name

def club_logo_upload_path(instance, filename):
    """Gener√°lja a felt√∂lt√©si √∫tvonalat a klub log√≥knak"""
    # Hozzuk l√©tre a mapp√°t, ha m√©g nem l√©tezik
    upload_dir = os.path.join(settings.MEDIA_ROOT, 'club_logos')
    os.makedirs(upload_dir, exist_ok=True)

    unique_filename = f"{uuid.uuid4().hex}_{filename}"
    return os.path.join('club_logos', unique_filename)

class Club(models.Model):
    name = models.CharField(max_length=200, unique=True)
    short_name = models.CharField(max_length=50, unique=True)
    address = models.CharField(max_length=255)
    logo = models.ImageField(upload_to=club_logo_upload_path, blank=True, null=True)
    creator = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='created_clubs')
    created_at = models.DateTimeField(auto_now_add=True)

    sports = models.ManyToManyField(Sport, related_name='clubs')

    def __str__(self):
        return self.name

class ParentChild(models.Model):
    """
    Sz√ºl≈ë-gyerek kapcsolat modell
    """
    parent = models.ForeignKey(User, on_delete=models.CASCADE, related_name="parentchild_children")
    child = models.ForeignKey(User, on_delete=models.CASCADE, related_name="parentchild_parents")
    
    STATUS_CHOICES = (
        ('pending', 'V√°rakozik j√≥v√°hagy√°sra'),
        ('approved', 'J√≥v√°hagyva'),
        ('rejected', 'Elutas√≠tva'),
    )
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    approved_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('parent', 'child')
        verbose_name = 'Sz√ºl≈ë-gyerek kapcsolat'
        verbose_name_plural = 'Sz√ºl≈ë-gyerek kapcsolatok'

    def __str__(self):
        return f'{self.parent.username} -> {self.child.username}'

    def approve(self):
        """J√≥v√°hagyja a kapcsolatot"""
        self.status = 'approved'
        self.approved_at = timezone.now()
        self.save()

class UserRole(models.Model):
    """
    Felhaszn√°l√≥ szerepk√∂r kapcsolat - ez a f≈ë modell a szerepk√∂r√∂k kezel√©s√©re
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_roles')
    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    club = models.ForeignKey(Club, on_delete=models.CASCADE)
    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)

    # Edz≈ë kapcsolat (csak sportol√≥ vagy sz√ºl≈ë szerepk√∂rn√©l sz√ºks√©ges)
    coach = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='athletes',
        help_text="A sportol√≥ vagy sz√ºl≈ëh√∂z rendelt edz≈ë"
    )

    # Sz√ºl≈ë kapcsolat (csak sportol√≥ szerepk√∂rn√©l sz√ºks√©ges, ha kiskor√∫)
    parent = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="userrole_children",
        help_text="A sportol√≥ sz√ºl≈ëje (ha kiskor√∫)"
    )

    # J√≥v√°hagy√°si st√°tusz
    STATUS_CHOICES = (
        ('pending', 'V√°rakozik j√≥v√°hagy√°sra'),
        ('approved', 'J√≥v√°hagyva'),
        ('rejected', 'Elutas√≠tva'),
    )
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')

    # K√ºl√∂n flag-ek r√©szleges j√≥v√°hagy√°s k√∂vet√©s√©re
    approved_by_parent = models.BooleanField(default=False)
    approved_by_coach = models.BooleanField(default=False)

    # Ki hagyta j√≥v√° √©s mikor
    approved_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='approved_roles',
        help_text="Ki hagyta v√©glegesen j√≥v√° ezt a szerepk√∂rt"
    )
    approved_at = models.DateTimeField(null=True, blank=True)

    # L√©trehoz√°s id≈ëpontja
    created_at = models.DateTimeField(auto_now_add=True)

    # Megjegyz√©sek
    notes = models.TextField(blank=True, help_text="Megjegyz√©sek a szerepk√∂rh√∂z")

    class Meta:
        unique_together = ('user', 'role', 'club', 'sport', 'coach', 'parent')
        verbose_name = 'Felhaszn√°l√≥ szerepk√∂r'
        verbose_name_plural = 'Felhaszn√°l√≥ szerepk√∂r√∂k'
        ordering = ['-created_at']

    def __str__(self):
        coach_info = f" (Edz≈ë: {self.coach.username})" if self.coach else ""
        parent_info = f" (Sz√ºl≈ë: {self.parent.username})" if self.parent else ""
        return f'{self.user.username} - {self.role.name} @ {self.club.short_name}/{self.sport.name}{coach_info}{parent_info}'

    # --- J√≥v√°hagy√°s logika ---
    def approve_by_parent(self, parent_user):
        """Sz√ºl≈ë j√≥v√°hagy√°sa"""
        if self.parent == parent_user:
            self.approved_by_parent = True
            self._try_finalize_approval(parent_user)

    def approve_by_coach(self, coach_user):
        """Edz≈ë j√≥v√°hagy√°sa"""
        if self.coach == coach_user:
            self.approved_by_coach = True
            self._try_finalize_approval(coach_user)

    def _try_finalize_approval(self, approver):
        """
        Ha minden sz√ºks√©ges f√©l j√≥v√°hagyta, v√©gleges√≠ti az approval-t.
        """
        if self.role.name == "Sportol√≥":
            if self.user.profile.is_adult:
                # 18 feletti sportol√≥n√°l csak edz≈ë kell
                if self.approved_by_coach:
                    self._finalize(approver)
            else:
                # 18 alatti sportol√≥n√°l sz√ºl≈ë + edz≈ë
                if self.approved_by_coach and self.approved_by_parent:
                    self._finalize(approver)
        elif self.role.name == "Sz√ºl≈ë":
            # Sz√ºl≈ët az edz≈ë hagyja j√≥v√°
            if self.approved_by_coach:
                self._finalize(approver)
        else:
            # Edz≈ët vagy vezet≈ët csak a klubvezet≈ë hagyhatja j√≥v√°
            if self.status == "pending":
                self._finalize(approver)

    def _finalize(self, approver):
        """V√©gleges j√≥v√°hagy√°s"""
        self.status = "approved"
        self.approved_by = approver
        self.approved_at = timezone.now()
        self.save(update_fields=['status', 'approved_by', 'approved_at',
                                 'approved_by_coach', 'approved_by_parent'])

    def reject(self, rejected_by_user):
        """Elutas√≠tja a szerepk√∂rt"""
        self.status = 'rejected'
        self.approved_by = rejected_by_user
        self.approved_at = timezone.now()
        self.save(update_fields=['status', 'approved_by', 'approved_at'])

    @property
    def needs_approval_from(self):
        """
        Megadja, hogy kinek kell m√©g j√≥v√°hagynia ezt a szerepk√∂r-ig√©nyl√©st.
        """
        # Ha a st√°tusz m√°r Approved vagy Rejected, nincs sz√ºks√©g tov√°bbi j√≥v√°hagy√°sra.
        if self.status == 'approved' or self.status == 'rejected':
            return None

        # Egyes√ºleti vezet≈ë szerepk√∂r
        # A klubvezet≈ëi szerepk√∂r ig√©ny√©t nem kell j√≥v√°hagyni (csak egy adminnak kell esetleg).
        if self.role.name == 'Egyes√ºleti vezet≈ë':
            return None

        # Edz≈ë √©s Sz√ºl≈ë szerepk√∂r
        # Ezeket az egyes√ºlet vezet≈ëje hagyja j√≥v√°.
        if self.role.name == 'Edz≈ë' or self.role.name == 'Sz√ºl≈ë':
            try:
                leader_role = UserRole.objects.get(
                    club=self.club,
                    role__name='Egyes√ºleti vezet≈ë',
                    status='approved'
                )
                return leader_role.user
            except UserRole.DoesNotExist:
                return None

        # Sportol√≥ szerepk√∂r (ez a leg√∂sszetettebb)
        if self.role.name == 'Sportol√≥':
            if self.user.is_adult:
                # Ha feln≈ëtt, akkor az Edz≈ënek kell j√≥v√°hagynia, ha van kijel√∂lt edz≈ë.
                return self.coach if self.coach else None
            else:
                # Ha kiskor√∫, a j√≥v√°hagy√°si l√°nc: Sz√ºl≈ë -> Edz≈ë
                if not self.parent:
                    # Nincs sz√ºl≈ë megadva, nem j√≥v√°hagyhat√≥
                    return None
                
                # Ha a sz√ºl≈ë m√©g nem hagyta j√≥v√°, a sz√ºl≈ë az, akinek j√≥v√° kell hagynia
                if self.status == 'pending' and self.parent_id and not self.approved_by_parent:
                    return self.parent
                
                # Ha a sz√ºl≈ë m√°r j√≥v√°hagyta, akkor az edz≈ënek kell j√≥v√°hagynia
                if self.approved_by_parent and not self.approved_by_coach:
                    return self.coach
                
                # Mindenki j√≥v√°hagyta (sz√ºl≈ë √©s edz≈ë is)
                return None
        
        return None

    @property
    def auto_approve(self):
        """Megadja, hogy automatikusan j√≥v√° kell-e hagyni"""
        return self.role.name == 'Egyes√ºleti vezet≈ë'