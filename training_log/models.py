# /app/training_log/models.py

from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from assessment.models import PlaceholderAthlete 
from users.models import Club, Sport, User

User = get_user_model()

# --- 1. TrainingSession ---
class TrainingSession(models.Model):
    """
    Egy adott edz√©s (h√≠v√°s) id≈ëpontj√°t, hely√©t √©s h√≠v√≥ edz≈ëj√©t r√∂gz√≠ti.
    """
    coach = models.ForeignKey(User, on_delete=models.CASCADE, 
                              limit_choices_to={'role__name': 'Edz≈ë'}, 
                              verbose_name="Edz≈ë (h√≠v√≥)")
    session_date = models.DateField(verbose_name="D√°tum")
    start_time = models.TimeField(verbose_name="Kezd√©s ideje")
    duration_minutes = models.IntegerField(verbose_name="Id≈ëtartam (perc)")
    location = models.CharField(max_length=255, verbose_name="Helysz√≠n", blank=True)
    
    def __str__(self):
        return f"Edz√©s: {self.session_date} - {self.coach.profile.last_name}"
        
    class Meta:
        verbose_name = "Edz√©s H√≠v√°s"
        verbose_name_plural = "Edz√©s H√≠v√°sok"


# --- 2. Attendance ---
class Attendance(models.Model):
    """
    R√∂gz√≠ti a sportol√≥k jelenl√©t√©t egy adott TrainingSession-√∂n.
    """
    session = models.ForeignKey(TrainingSession, on_delete=models.CASCADE, 
                                related_name='attendees', verbose_name="Edz√©s")
    
    # Kapcsolat a k√©tf√©le sportol√≥hoz:
    registered_athlete = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                                           related_name='attendances', verbose_name="Regisztr√°lt Sportol√≥")
    placeholder_athlete = models.ForeignKey(PlaceholderAthlete, on_delete=models.CASCADE, null=True, blank=True, 
                                            related_name='attendances', verbose_name="Ideiglenes Sportol√≥")
    
    # Jelenl√©t √©s Edz√©s Visszajelz√©s
    is_present = models.BooleanField(default=False, verbose_name="Jelenl√©t")
    is_injured = models.BooleanField(default=False)
    is_guest = models.BooleanField(default=False)
    rpe_score = models.IntegerField(null=True, blank=True, verbose_name="Edz√©s RPE (1-10)")
    
    def get_athlete_name(self):
        if self.registered_athlete:
            return f"{self.registered_athlete.profile.last_name} {self.registered_athlete.profile.first_name}"
        elif self.placeholder_athlete:
            return f"{self.placeholder_athlete.last_name} {self.placeholder_athlete.first_name} (PH)"
        return "N/A"

    def __str__(self):
        return f"{self.session} - {self.get_athlete_name()} ({'Jelen' if self.is_present else 'Hi√°nyzik'})"
        
    class Meta:
        verbose_name = "Edz√©s Jelenl√©t"
        verbose_name_plural = "Edz√©s Jelenl√©tek"


class AbsenceSchedule(models.Model):
    """
    Glob√°lis sz√ºnetek √©s le√°ll√°sok kezel√©se (pl. ny√°ri sz√ºnet, nemzeti √ºnnepek).
    Ez befoly√°solja az √∂sszes TrainingSchedule-t.
    """
    name = models.CharField(max_length=100, verbose_name="Sz√ºnet neve")
    start_date = models.DateField(verbose_name="Kezd≈ë d√°tum")
    end_date = models.DateField(verbose_name="Befejez≈ë d√°tum")
    
    # Kateg√≥ri√°k: hogy k√∂nnyebb legyen sz≈±rni (pl. "Nemzeti √ºnnep", "Iskolai sz√ºnet")
    CATEGORY_CHOICES = [
        ('NAT', 'Nemzeti/√Ållami √únnep'),
        ('SCH', 'Iskolai/Oktat√°si Sz√ºnet'),
        ('WNT', 'T√©li Le√°ll√°s'),
        ('SUM', 'Ny√°ri Sz√ºnet'),
        ('OTH', 'Egy√©b')
    ]
    category = models.CharField(max_length=3, choices=CATEGORY_CHOICES, default='OTH', verbose_name="Kateg√≥ria")
    
    # Opcion√°lis: a Klubhoz rendel√©s (pl. ha csak az adott klubnak van le√°ll√°sa)
    club = models.ForeignKey(Club, on_delete=models.CASCADE, null=True, blank=True, verbose_name="Egyes√ºlet")

    class Meta:
        verbose_name = "Sz√ºnet/Le√°ll√°s"
        verbose_name_plural = "Sz√ºnetek/Le√°ll√°sok"
        ordering = ['start_date']

    def __str__(self):
        return f"{self.name} ({self.start_date} - {self.end_date})"


class TrainingSchedule(models.Model):
    DAY_CHOICES = [
        (1, 'H√©tf≈ë'), (2, 'Kedd'), (3, 'Szerda'), (4, 'Cs√ºt√∂rt√∂k'),
        (5, 'P√©ntek'), (6, 'Szombat'), (7, 'Vas√°rnap'),
    ]
    
    GENDER_CHOICES = [
        ('M', 'Fi√∫'),
        ('F', 'L√°ny'),
    ]

    club = models.ForeignKey(Club, on_delete=models.CASCADE, verbose_name="Egyes√ºlet")
    sport = models.ForeignKey(Sport, on_delete=models.CASCADE, verbose_name="Sport√°g")
    coach = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        limit_choices_to={'user_roles__role__name': 'Edz≈ë'},
        verbose_name="Felel≈ës Edz≈ë"
    )
    name = models.CharField(max_length=100, verbose_name="Edz√©scsoport neve (Pl. U10 fi√∫k)")

    # Napok
    days_of_week = models.CharField(
        _("Napok"), 
        max_length=15, 
        help_text="Vessz≈ëvel elv√°lasztott napok: 1=H√©tf≈ë, 7=Vas√°rnap."
    )
    
    # Id≈ëpontok
    start_time = models.TimeField(verbose_name="Kezd√©s id≈ëpontja")
    end_time = models.TimeField(verbose_name="Befejez√©s id≈ëpontja")
    
    # √âletkor szerinti sz≈±r√©s
    birth_years = models.CharField(
        _("Sz√ºlet√©si √©vek"), 
        max_length=100, 
        help_text="Vessz≈ëvel elv√°lasztott sz√ºlet√©si √©vek."
    )

    # üîß JAV√çTOTT: itt nem haszn√°lunk choices-t
    genders = models.CharField(
        _("Nemek"), 
        max_length=10, 
        help_text="Kiv√°lasztott nemek (pl. M,F)."
    )

    # √ârv√©nyess√©gi tartom√°ny
    start_date = models.DateField(default=timezone.now, verbose_name="√ârv√©nyess√©g kezdete")
    end_date = models.DateField(null=True, blank=True, verbose_name="√ârv√©nyess√©g v√©ge (Opcion√°lis)")

    class Meta:
        verbose_name = "Edz√©srend"
        verbose_name_plural = "Edz√©srendek"
        ordering = ['start_time', 'club__name']

    def __str__(self):
        return f"{self.name} - {self.start_time.strftime('%H:%M')} ({self.birth_years})"
