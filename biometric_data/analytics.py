# biometric_data/analytics.py

from datetime import date, timedelta
from django.utils import timezone
from django.db.models import Avg, Max, Min 

# --------------------------------------------------------------------------------------
# SEG√âDF√úGGV√âNYEK A LOGIK√ÅHOZ
# --------------------------------------------------------------------------------------

# A. S√∫ly visszajelz√©s
def generate_weight_feedback(weight_data_queryset):
    """Elemzi a tests√∫ly adatokat √©s sz√∂veges visszajelz√©st gener√°l."""
    
    # 0. El≈ëzetes ellen≈ërz√©s
    if not weight_data_queryset.exists():
        return "<p class='alert alert-info'>Nincsenek tests√∫lyadatok r√∂gz√≠tve. K√©rlek, r√∂gz√≠tsd az els≈ë m√©r√©st a pontos elemz√©shez!</p>"

    latest_entry = weight_data_queryset.first()
    latest_weight = latest_entry.morning_weight
    
    feedback = []
    feedback.append(f"<p><strong>Legfrissebb Reggeli S√∫ly:</strong> <strong>{latest_weight} kg</strong> ({latest_entry.workout_date})</p>")

    # 1. Tests√∫ly Trend Elemz√©s (7 napos √°tlag)
    today = timezone.localdate()
    seven_days_ago = today - timedelta(days=7)
    fourteen_days_ago = today - timedelta(days=14)

    last_week_data = weight_data_queryset.filter(workout_date__gte=seven_days_ago)
    prev_week_data = weight_data_queryset.filter(workout_date__range=[fourteen_days_ago, seven_days_ago - timedelta(days=1)])

    if last_week_data.exists() and prev_week_data.exists():
        last_week_avg = last_week_data.aggregate(Avg('morning_weight'))['morning_weight__avg']
        prev_week_avg = prev_week_data.aggregate(Avg('morning_weight'))['morning_weight__avg']
        
        change = round((last_week_avg - prev_week_avg) if last_week_avg and prev_week_avg else 0, 2)
        
        if change > 0.3:
            trend_text = "Emelked≈ë trendet"
            trend_dir = "n≈ëtt√©l"
            trend_class = "alert-warning"
        elif change < -0.3:
            trend_text = "Cs√∂kken≈ë trendet"
            trend_dir = "fogyt√°l"
            trend_class = "alert-success"
        else:
            trend_text = "Stabil tests√∫lyt"
            trend_dir = "stabil"
            trend_class = "alert-info"
            
        feedback.append(
            f"<p class='mt-2 {trend_class} p-2 rounded'><strong>7 napos Trend:</strong> {trend_text} jeleznek az adatok. √Åtlagosan **{abs(change)} kg-ot** {(trend_dir)} az el≈ëz≈ë 7 naphoz k√©pest. Ez a v√°ltoz√°s **megfontolt figyelmet** ig√©nyel.</p>"
        )

    # 2. Test√∂sszet√©tel (legfrissebb)
    latest_bf = latest_entry.body_fat_percentage
    latest_muscle = latest_entry.muscle_percentage
    
    if latest_bf and latest_muscle:
        feedback.append(
            f"<p><strong>Test√∂sszet√©tel:</strong> Testzs√≠r: **{latest_bf}%**, Izomt√∂meg: **{latest_muscle}%**.</p>"
        )

    # 3. Folyad√©kvesztes√©g (nett√≥ s√∫lyvesztes√©g edz√©s ut√°n)
    if latest_entry.pre_workout_weight and latest_entry.post_workout_weight:
        fluid_loss_gross = latest_entry.pre_workout_weight - latest_entry.post_workout_weight
        fluid_intake = latest_entry.fluid_intake if latest_entry.fluid_intake else 0
        net_loss = round(fluid_loss_gross - fluid_intake, 2)
        
        if net_loss > 1.5:
            loss_class = "alert-danger"
            loss_message = "Kritikus folyad√©kvesztes√©g! Ez a teljes√≠tm√©nyt √©s a regener√°ci√≥t dr√°maian rontja. F√≥kusz√°lj a rehidrat√°ci√≥ra!"
        elif net_loss > 0.5:
            loss_class = "alert-warning"
            loss_message = "M√©rs√©kelt folyad√©kvesztes√©g √©szlelhet≈ë. √úgyelj a hat√©kony rehidrat√°ci√≥ra!"
        else:
            loss_class = "alert-success"
            loss_message = "A folyad√©kh√°ztart√°s stabil, a hidrat√°ci√≥s protokollod j√≥l m≈±k√∂dik."
            
        feedback.append(
            f"<p class='mt-2 {loss_class} p-2 rounded'><strong>Edz√©s Folyad√©kvesztes√©g (Nett√≥):</strong> **{net_loss} kg** volt. {loss_message}</p>"
        )

    return " ".join(feedback)

# B. Maroker≈ë/Test√∂sszet√©tel id≈ëz√≠t√©si visszajelz√©s
def generate_timing_feedback(last_weight, last_feedback):
    """
    Kisz√°m√≠tja az utols√≥ test√∂sszet√©tel vagy maroker≈ë m√©r√©s d√°tum√°t,
    √©s visszajelz√©st ad a k√∂vetkez≈ë m√©r√©s ide√°lis id≈ëpontj√°r√≥l (14 napos ciklus).
    """
    today = date.today()
    latest_date = None
    
    # 1. Tests√∫ly adat (body_fat_percentage)
    # Csak akkor vessz√ºk figyelembe, ha van testzs√≠r adat (ez az eseti m√©r√©s)
    if last_weight and last_weight.body_fat_percentage:
        latest_date = last_weight.workout_date
    
    # 2. Visszajelz√©s adat (maroker≈ë)
    if last_feedback and (last_feedback.right_grip_strength or last_feedback.left_grip_strength):
        # Ha a feedback k√©s≈ëbbi d√°tum√∫, mint a s√∫lyadat (vagy nincs s√∫lyadat), akkor azt tekintj√ºk utols√≥ m√©r√©snek
        if latest_date is None or last_feedback.workout_date > latest_date:
            latest_date = last_feedback.workout_date

    # 3. Visszajelz√©s gener√°l√°sa
    if latest_date:
        days_since = (today - latest_date).days
        days_until_target = 14 - days_since
        
        if days_since < 14:
            feedback_class = "text-success"
            message = f"Utols√≥ m√©r√©s: {days_since} napja. K√©rlek, v√©gezz √∫j m√©r√©st **{days_until_target} nap m√∫lva** (ide√°lis esetben)!"
        else:
            feedback_class = "text-danger"
            message = f"Utols√≥ m√©r√©s: {days_since} napja. A 14 napos m√©r√©si ciklus lej√°rt! K√©rlek, miel≈ëbb r√∂gz√≠tsd az adataidat."
            
        return f"""
            <span class="fw-bold {feedback_class}">{message}</span>
        """
    
    return "Nincs r√∂gz√≠tett **test√∂sszet√©tel** vagy **maroker≈ë** adat. K√©rlek, v√©gezz el egy m√©r√©st a visszajelz√©shez."

# C. HRV √©s Alv√°s visszajelz√©s (PLACEHOLDER - EZT KELL MAJD B≈êV√çTEN√úNK)
def generate_hrv_sleep_feedback(data_queryset):
    """Elemzi a HRV √©s Alv√°s adatokat, √©s √∂sszehasonl√≠tja a legfrissebb adatot a 7 napos √°tlaggal."""

    # 0. El≈ëzetes ellen≈ërz√©s
    if not data_queryset.exists():
        return "<p class='alert alert-info'>Nincsenek r√∂gz√≠tett **HRV** vagy **alv√°s** adatok. K√©rlek, r√∂gz√≠ts adatot a visszajelz√©shez!</p>"

    latest_entry = data_queryset.first()
    today = timezone.localdate()
    seven_days_ago = today - timedelta(days=7)

    # 1. 7 napos √°tlagok sz√°m√≠t√°sa
    # A hiba√ºzenet szerint a mez≈ëk: hrv, sleep_quality, alertness
    recent_data = data_queryset.filter(recorded_at__gte=seven_days_ago, hrv__isnull=False)

    if not recent_data.exists():
        return "<p class='alert alert-warning'>A legfrissebb adat r√∂gz√≠tve, de nincs elegend≈ë (7 napos) HRV adat a trendsz√°m√≠t√°shoz.</p>"

    # CSAK A L√âTEZ≈ê MEZ≈êKET aggregate-elj√ºk: hrv, sleep_quality, alertness
    averages = recent_data.aggregate(
        avg_hrv=Avg('hrv'),
        avg_sleep_quality=Avg('sleep_quality'),
        avg_alertness=Avg('alertness')
    )
    
    # 2. √ñsszehasonl√≠t√°s a legfrissebb adattal
    latest_hrv = latest_entry.hrv
    latest_sleep_quality = latest_entry.sleep_quality
    latest_alertness = latest_entry.alertness

    feedback = []

    # HRV Elemz√©s
    if latest_hrv and averages['avg_hrv']:
        avg_hrv = round(averages['avg_hrv'], 1)
        hrv_change = latest_hrv - avg_hrv
        
        if hrv_change > 5:
            hrv_message = "Kiv√°l√≥ HRV! Magas szint≈± **regener√°ci√≥t** jelez. K√©sz√ºlj egy kem√©ny edz√©sre. üí™"
            hrv_class = "alert-success"
        elif hrv_change > -5:
            hrv_message = "Stabil HRV. A regener√°ci√≥d a szok√°sos szinten van. üÜó"
            hrv_class = "alert-info"
        else:
            hrv_message = "Alacsonyabb a HRV a 7 napos √°tlagn√°l! Enyhe **f√°radts√°got** vagy stresszt jelez. Fontold meg a tervezett edz√©s intenzit√°s√°nak cs√∂kkent√©s√©t. ‚ö†Ô∏è"
            hrv_class = "alert-warning"
        
        feedback.append(f"<p class='mt-2 {hrv_class} p-2 rounded'><strong>HRV: {latest_hrv} (7 napos √°tlag: {avg_hrv})</strong>. {hrv_message}</p>")

    # Nyugalmi pulzus (Resting HR) Elemz√©s - ELT√ÅVOL√çTVA a mez≈ë hi√°nya miatt.
    # A HRV √©rt√©k √°ltal√°ban m√°r mag√°ban hordozza a pulzusv√°ltoz√°s inform√°ci√≥j√°t.

    # Alv√°s Min≈ës√©g √©s √âbers√©g Elemz√©s (Egyszer≈±s√≠tett)
    # Csak akkor fut le, ha mindk√©t mez≈ë rendelkez√©sre √°ll
    if latest_sleep_quality and averages['avg_sleep_quality'] and latest_alertness and averages['avg_alertness']:
        avg_sleep = round(averages['avg_sleep_quality'], 1)
        avg_alert = round(averages['avg_alertness'], 1)

        if latest_sleep_quality >= 8 and latest_alertness >= 8:
            combined_message = "Kiemelked≈ë alv√°s √©s √©bers√©g! A tested k√©szen √°ll a maxim√°lis terhel√©sre. üöÄ"
            combined_class = "alert-success"
        elif latest_sleep_quality < 5 or latest_alertness < 5:
            combined_message = "Gyenge alv√°smin≈ës√©g √©s/vagy √©bers√©g. Cs√∂kkenteni kell a stresszt/terhel√©st a ki√©g√©s elker√ºl√©se √©rdek√©ben. üõë"
            combined_class = "alert-danger"
        else:
            combined_message = f"Az alv√°s √©s √©bers√©g a 7 napos √°tlag k√∂r√ºl mozog (Alv√°s √°tlag: {avg_sleep}, √âbers√©g √°tlag: {avg_alert})."
            combined_class = "alert-info"

        feedback.append(f"<p class='mt-2 {combined_class} p-2 rounded'><strong>√ñsszefoglal√≥:</strong> {combined_message}</p>")


    return " ".join(feedback)

# D. Fut√≥teljes√≠tm√©ny visszajelz√©s (PLACEHOLDER)
def generate_running_feedback(data_queryset):
    """
    Elemzi a fut√≥teljes√≠tm√©ny adatokat (temp√≥ √©s pulzus), 
    √©s √∂sszehasonl√≠tja a legfrissebb fut√°st az utols√≥ 5 fut√°s √°tlag√°val.
    """
    
    # 0. El≈ëzetes ellen≈ërz√©s
    if not data_queryset.exists():
        return "<p class='alert alert-info'>Nincsenek r√∂gz√≠tett **fut√≥teljes√≠tm√©ny** adatok. K√©rlek, r√∂gz√≠tsd az els≈ë fut√°sod!</p>"

    latest_run = data_queryset.first()
    
    # Csak az utols√≥ 5 fut√°st vessz√ºk alapul az √∂sszehasonl√≠t√°shoz
    recent_runs = data_queryset[:5]

    # Sz√ºks√©ges mez≈ëk ellen≈ërz√©se
    if not (latest_run.run_distance_km and latest_run.run_duration):
        return "<p class='alert alert-warning'>A legfrissebb fut√°s (vagy az utols√≥ 5 fut√°s) nem tartalmazza a **t√°vols√°g** √©s **id≈ëtartam** adatot a temp√≥ sz√°m√≠t√°s√°hoz.</p>"

    # 1. Seg√©df√ºggv√©ny: Temp√≥ (pace) sz√°m√≠t√°sa mp/km-ben
    def calculate_pace_seconds(distance_km, duration):
        if not distance_km or not duration:
            return None
        # duration (DurationField) m√°sodperceit osztjuk a t√°vols√°ggal
        total_seconds = duration.total_seconds()
        pace_seconds = total_seconds / float(distance_km)
        return pace_seconds

    # 2. Temp√≥ Elemz√©s
    
    # Temp√≥ m√°sodperc/km-ben minden fut√°shoz
    pace_seconds_list = [calculate_pace_seconds(run.run_distance_km, run.run_duration) for run in recent_runs if run.run_distance_km and run.run_duration]
    
    if not pace_seconds_list:
        return "<p class='alert alert-warning'>Nincs elegend≈ë adat (t√°vols√°g vagy id≈ëtartam hi√°nyzik) a temp√≥ trend elemz√©s√©hez.</p>"

    latest_pace_seconds = calculate_pace_seconds(latest_run.run_distance_km, latest_run.run_duration)
    
    # √Åtlagos temp√≥ (az utols√≥ 5 fut√°s √°tlaga)
    avg_pace_seconds = sum(pace_seconds_list) / len(pace_seconds_list)
    
    # V√°ltoz√°s (pozit√≠v = lassul√°s, negat√≠v = gyorsul√°s)
    pace_change = latest_pace_seconds - avg_pace_seconds
    
    # Temp√≥ m√°sodperceinek √°talak√≠t√°sa "perc:m√°sodperc/km" form√°tumra
    def format_pace(pace_seconds):
        minutes = int(pace_seconds // 60)
        seconds = int(pace_seconds % 60)
        return f"{minutes:02d}:{seconds:02d}/km"
    
    latest_pace_formatted = format_pace(latest_pace_seconds)
    avg_pace_formatted = format_pace(avg_pace_seconds)
    
    # Visszajelz√©s gener√°l√°sa
    feedback = []
    
    if pace_change < -5:  # Gyorsul√°s > 5 m√°sodperc/km
        pace_message = "Kiemelked≈ë fut√°s! A temp√≥d jelent≈ësen **gyorsabb** az utols√≥ 5 fut√°s √°tlag√°n√°l. Nagyszer≈± forma! üöÄ"
        pace_class = "alert-success"
    elif pace_change > 5: # Lassul√°s > 5 m√°sodperc/km
        pace_message = "Lassul√°s √©szlelhet≈ë. A temp√≥d **lass√∫bb** lett. A f√°radts√°g vagy a nagyobb t√°v/pulzus lehet az oka. ‚ö†Ô∏è"
        pace_class = "alert-warning"
    else:
        pace_message = "Stabil teljes√≠tm√©ny. A temp√≥d az √°tlagos szinten van. üÜó"
        pace_class = "alert-info"
        
    feedback.append(
        f"<p class='mt-2 {pace_class} p-2 rounded'><strong>Legfrissebb Temp√≥: {latest_pace_formatted}</strong> (√°tlag: {avg_pace_formatted}). {pace_message}</p>"
    )

    # 3. Pulzus Elemz√©s (√Åtlagos Pulzus)
    
    # Csak azokat a fut√°sokat vessz√ºk, ahol van √°tlagos pulzus
    recent_hr_data = [run.run_avg_hr for run in recent_runs if run.run_avg_hr is not None]

    if latest_run.run_avg_hr and recent_hr_data:
        latest_avg_hr = latest_run.run_avg_hr
        avg_hr_runs = sum(recent_hr_data) / len(recent_hr_data)
        
        hr_change = latest_avg_hr - avg_hr_runs
        
        if hr_change > 5:
            hr_message = "Magasabb √°tlagos pulzus! Ez nagyobb **megterhel√©st** vagy intenzit√°st jelentett a megszokotthoz k√©pest. √úgyelj a regener√°ci√≥ra. üî¥"
            hr_class = "alert-warning"
        elif hr_change < -5:
            hr_message = "Alacsonyabb √°tlagos pulzus. Ez a fut√°s viszonylag **k√∂nnyebb** volt sz√°modra. Kiv√°l√≥ aerob fejl≈ëd√©s jele is lehet. üü¢"
            hr_class = "alert-success"
        else:
            hr_message = "Stabil pulzusszint. A terhel√©s a szok√°sos volt. üÜó"
            hr_class = "alert-info"
            
        feedback.append(
            f"<p class='mt-2 {hr_class} p-2 rounded'><strong>Legfrissebb √Åtlagos Pulzus: {latest_avg_hr} bpm</strong> (√°tlag: {round(avg_hr_runs)} bpm). {hr_message}</p>"
        )
        
    return " ".join(feedback)